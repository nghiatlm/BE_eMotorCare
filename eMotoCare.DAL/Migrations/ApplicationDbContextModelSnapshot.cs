// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eMotoCare.DAL.context;

#nullable disable

namespace eMotoCare.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("eMotoCare.BO.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("full_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasColumnName("phone");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("role_ame");

                    b.Property<string>("Stattus")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("account");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("appointment_id");

                    b.Property<decimal?>("ActualCost")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("actual_cost");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("appointment_date");

                    b.Property<Guid?>("ApproveById")
                        .HasColumnType("char(36)")
                        .HasColumnName("approve_by_id");

                    b.Property<Guid?>("CampaignId")
                        .HasColumnType("char(36)")
                        .HasColumnName("campaign_id");

                    b.Property<string>("CheckinQRCode")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("checkin_qr_code");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_id");

                    b.Property<decimal?>("EstimatedCost")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("estimated_cost");

                    b.Property<Guid>("ServiceCenterId")
                        .HasColumnType("char(36)")
                        .HasColumnName("service_center_id");

                    b.Property<Guid?>("ServiceCenterSlotId")
                        .HasColumnType("char(36)")
                        .HasColumnName("service_center_slot_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("status");

                    b.Property<string>("TimeSlot")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("time_slot");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("type");

                    b.Property<Guid?>("VehicleStageId")
                        .HasColumnType("char(36)")
                        .HasColumnName("vehicle_stage_id");

                    b.HasKey("Id");

                    b.HasIndex("ApproveById");

                    b.HasIndex("CampaignId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ServiceCenterId");

                    b.HasIndex("ServiceCenterSlotId");

                    b.HasIndex("VehicleStageId");

                    b.ToTable("appointment");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.BatteryCheck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("battery_check_id");

                    b.Property<string>("Capacity")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("capacity");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("EVCheckDetailId")
                        .HasColumnType("char(36)")
                        .HasColumnName("ev_check_detail_id");

                    b.Property<string>("Energy")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("energy");

                    b.Property<Guid>("PartItemId")
                        .HasColumnType("char(36)")
                        .HasColumnName("part_item_id");

                    b.Property<string>("Power")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("power");

                    b.Property<string>("SOC")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("soc");

                    b.Property<string>("SOH")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("soh");

                    b.Property<string>("Solution")
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("solution");

                    b.Property<string>("Temp")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("temp");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("time");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Voltage")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("voltage");

                    b.Property<string>("current")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("current");

                    b.HasKey("Id");

                    b.HasIndex("EVCheckDetailId")
                        .IsUnique();

                    b.HasIndex("PartItemId");

                    b.ToTable("battery_check");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("campaign_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("campaign");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.CampaignDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("campaign_detail_id");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("action_type");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("char(36)")
                        .HasColumnName("campaign_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("EVCheckDetailId")
                        .HasColumnType("char(36)");

                    b.Property<int?>("EstimatedTime")
                        .HasColumnType("int")
                        .HasColumnName("estimated_time");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_mandatory");

                    b.Property<string>("Note")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("note");

                    b.Property<Guid>("PartId")
                        .HasColumnType("char(36)")
                        .HasColumnName("part_id");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("PartId");

                    b.ToTable("campaign_detail");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("char(36)")
                        .HasColumnName("account_id");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("address");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("avatar_url");

                    b.Property<string>("CitizenId")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasColumnName("citizen_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CustomerCode")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("customer_code");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("gender");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("last_name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("customer");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.EVCheck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ev_check_id");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("char(36)")
                        .HasColumnName("appointment_id");

                    b.Property<DateTime>("CheckDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("check_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Odometer")
                        .HasColumnType("int")
                        .HasColumnName("odometer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("status");

                    b.Property<Guid>("TaskExecutorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("task_executor_id");

                    b.Property<decimal?>("TotalAmout")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("total_amout");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.HasIndex("TaskExecutorId");

                    b.ToTable("ev_check");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.EVCheckDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ev_check_detail_id");

                    b.Property<Guid?>("CampaignDetailId")
                        .HasColumnType("char(36)")
                        .HasColumnName("campaign_detail_id");

                    b.Property<Guid>("EVCheckId")
                        .HasColumnType("char(36)")
                        .HasColumnName("ev_check_id");

                    b.Property<Guid?>("MaintenanceStageDetailId")
                        .HasColumnType("char(36)")
                        .HasColumnName("maintenance_stage_detail_id");

                    b.Property<Guid>("PartItemId")
                        .HasColumnType("char(36)")
                        .HasColumnName("part_item_id");

                    b.Property<decimal?>("PricePart")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price_part");

                    b.Property<decimal?>("PriceService")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price_service");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("quantity");

                    b.Property<int>("Remedies")
                        .HasColumnType("int")
                        .HasColumnName("remedies");

                    b.Property<Guid?>("ReplacePartId")
                        .HasColumnType("char(36)")
                        .HasColumnName("replace_part_id");

                    b.Property<string>("Result")
                        .HasColumnType("longtext")
                        .HasColumnName("result");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_amount");

                    b.Property<string>("Unit")
                        .HasColumnType("longtext")
                        .HasColumnName("unit");

                    b.HasKey("Id");

                    b.HasIndex("CampaignDetailId");

                    b.HasIndex("EVCheckId");

                    b.HasIndex("MaintenanceStageDetailId")
                        .IsUnique();

                    b.HasIndex("PartItemId");

                    b.HasIndex("ReplacePartId")
                        .IsUnique();

                    b.ToTable("ev_check_detail");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.ExportNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("export_note_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExportById")
                        .HasColumnType("char(36)")
                        .HasColumnName("export_by_id");

                    b.Property<DateTime>("ExportDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("export_date");

                    b.Property<string>("ExportTo")
                        .HasColumnType("longtext")
                        .HasColumnName("export_to");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("note");

                    b.Property<Guid>("ServiceCenterId")
                        .HasColumnType("char(36)")
                        .HasColumnName("service_center_id");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int")
                        .HasColumnName("total_quantity");

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("total_value");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ExportById");

                    b.HasIndex("ServiceCenterId");

                    b.ToTable("export_note");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.ImportNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("import_note_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ImportById")
                        .HasColumnType("char(36)")
                        .HasColumnName("import_by_id");

                    b.Property<DateTime>("ImportDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("import_date");

                    b.Property<string>("ImportFrom")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("import_from");

                    b.Property<Guid>("ServiceCenterId")
                        .HasColumnType("char(36)")
                        .HasColumnName("service_center_id");

                    b.Property<string>("Supplier")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("supplier");

                    b.Property<decimal?>("TotalAmout")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("total_amout");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ImportById");

                    b.HasIndex("ServiceCenterId");

                    b.ToTable("import_note");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.MaintenancePlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("maintenance_plan_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("description");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("effective_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("status");

                    b.Property<int>("TotalStages")
                        .HasColumnType("int")
                        .HasColumnName("total_stages");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("unit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("maintenance_plan");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.MaintenanceStage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("maintenance_stage_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("description");

                    b.Property<string>("DurationMonth")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("duration_month");

                    b.Property<int?>("EstimatedTime")
                        .HasColumnType("int")
                        .HasColumnName("estimated_time");

                    b.Property<Guid>("MaintenancePlanId")
                        .HasColumnType("char(36)")
                        .HasColumnName("maintenance_plan_id");

                    b.Property<string>("Mileage")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("mileage");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("MaintenancePlanId");

                    b.ToTable("maintenance_stage");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.MaintenanceStageDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("maintenance_stage_detail_id");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("action_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("description");

                    b.Property<Guid>("MaintenanceStageId")
                        .HasColumnType("char(36)")
                        .HasColumnName("maintenance_stage_id");

                    b.Property<Guid>("PartId")
                        .HasColumnType("char(36)")
                        .HasColumnName("part_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceStageId");

                    b.HasIndex("PartId");

                    b.ToTable("maintenance_stage_detail");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Model", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("model_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("code");

                    b.Property<Guid>("MaintenancePlanId")
                        .HasColumnType("char(36)")
                        .HasColumnName("maintenance_plan_id");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("manufacturer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("MaintenancePlanId");

                    b.ToTable("model");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.ModelPartType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("model_part_type_id");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("char(36)")
                        .HasColumnName("model_id");

                    b.Property<Guid>("PartTypeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("part_type_id");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.HasIndex("PartTypeId");

                    b.ToTable("model_part_type");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Part", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("part_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("description");

                    b.Property<string>("Image")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<Guid>("PartTypeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("part_type_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("PartTypeId");

                    b.ToTable("part");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.PartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("part_item_id");

                    b.Property<Guid?>("ExportNoteId")
                        .HasColumnType("char(36)")
                        .HasColumnName("export_note_id");

                    b.Property<Guid?>("ImportNoteId")
                        .HasColumnType("char(36)")
                        .HasColumnName("import_note_id");

                    b.Property<Guid>("PartId")
                        .HasColumnType("char(36)")
                        .HasColumnName("part_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("serial_number");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("WarantyEndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("waranty_end_date");

                    b.Property<DateTime?>("WarantyStartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("waranty_start_date");

                    b.Property<int?>("WarrantyPeriod")
                        .HasColumnType("int")
                        .HasColumnName("warranty_period");

                    b.HasKey("Id");

                    b.HasIndex("ExportNoteId");

                    b.HasIndex("ImportNoteId");

                    b.HasIndex("PartId");

                    b.ToTable("part_item");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.PartType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("part_type_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("part_type");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("payment_id");

                    b.Property<double>("Amount")
                        .HasColumnType("double")
                        .HasColumnName("amount");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("char(36)")
                        .HasColumnName("appointment_id");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("currency");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_id");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("payment_method");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("status");

                    b.Property<string>("TransactionCode")
                        .HasColumnType("varchar(150)")
                        .HasColumnName("transaction_code");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("CustomerID");

                    b.ToTable("payment");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.PriceService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("price_service_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("description");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("effective_date");

                    b.Property<decimal>("LaborCost")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("labor_cost");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<Guid>("PartTypeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("part_type_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<int>("Remedies")
                        .HasColumnType("int")
                        .HasColumnName("remedies");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("PartTypeId");

                    b.ToTable("price_service");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.RMA", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("rma_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("code");

                    b.Property<Guid>("CreateById")
                        .HasColumnType("char(36)")
                        .HasColumnName("create_by_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_id");

                    b.Property<string>("Note")
                        .HasColumnType("longtext")
                        .HasColumnName("note");

                    b.Property<DateTime>("RMADate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("rma_date");

                    b.Property<string>("ReturnAddress")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("return_address");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreateById");

                    b.HasIndex("CustomerId");

                    b.ToTable("rma");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.RMADetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("rma_detail_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("EVCheckDetailId")
                        .HasColumnType("char(36)")
                        .HasColumnName("ev_check_detail_id");

                    b.Property<DateTime?>("ExpirationDateRMA")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expiration_date_rma");

                    b.Property<string>("Inspector")
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("inspector");

                    b.Property<Guid>("PartItemId")
                        .HasColumnType("char(36)")
                        .HasColumnName("part_item_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<Guid>("RMAId")
                        .HasColumnType("char(36)")
                        .HasColumnName("rma_id");

                    b.Property<string>("RMANumber")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("rma_number");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("reason");

                    b.Property<DateTime?>("ReleaseDateRMA")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("release_date_rma");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("result");

                    b.Property<string>("Solution")
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("solution");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("EVCheckDetailId")
                        .IsUnique();

                    b.HasIndex("PartItemId");

                    b.HasIndex("RMAId");

                    b.ToTable("rma_detail");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.ServiceCenter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("service_center_id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("address");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("latitude");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("phone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("service_center");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.ServiceCenterInventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("service_center_inventory_id");

                    b.Property<Guid?>("PartItemId")
                        .HasColumnType("char(36)")
                        .HasColumnName("part_item_id");

                    b.Property<Guid>("ServiceCenterId")
                        .HasColumnType("char(36)")
                        .HasColumnName("service_center_id");

                    b.HasKey("Id");

                    b.HasIndex("PartItemId")
                        .IsUnique();

                    b.HasIndex("ServiceCenterId");

                    b.ToTable("service_center_inventory");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.ServiceCenterSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("service_center_slot_id");

                    b.Property<int>("Capacity")
                        .HasColumnType("int")
                        .HasColumnName("capacity");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("day_of_week");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("Note")
                        .HasColumnType("longtext")
                        .HasColumnName("note");

                    b.Property<Guid>("ServiceCenterId")
                        .HasColumnType("char(36)")
                        .HasColumnName("service_center_id");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("start_time");

                    b.HasKey("Id");

                    b.HasIndex("ServiceCenterId");

                    b.ToTable("service_center_slot");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("staff_id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("char(36)")
                        .HasColumnName("account_id");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("address");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("avatar_url");

                    b.Property<string>("CitizenId")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasColumnName("citizen_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("gender");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("last_name");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("position");

                    b.Property<Guid>("ServiceCenterId")
                        .HasColumnType("char(36)")
                        .HasColumnName("service_center_id");

                    b.Property<string>("StaffCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("staff_code");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("ServiceCenterId");

                    b.ToTable("staff");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("vehicle_id");

                    b.Property<string>("ChassisNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("chassis_number");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_id");

                    b.Property<string>("EngineNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("engine_number");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("image");

                    b.Property<DateTime>("ManufactureDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("manufacture_date");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("char(36)")
                        .HasColumnName("model_id");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("purchase_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("VinNUmber")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("vin_number");

                    b.Property<DateTime>("WarrantyExpiry")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("warranty_expiry");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ModelId");

                    b.ToTable("vehicle");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.VehiclePartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("vehicle_part_item_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("InstallDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("install_date");

                    b.Property<Guid>("PartItemId")
                        .HasColumnType("char(36)")
                        .HasColumnName("part_item_id");

                    b.Property<Guid?>("ReplaceForId")
                        .HasColumnType("char(36)")
                        .HasColumnName("replace_for_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id");

                    b.HasIndex("PartItemId");

                    b.HasIndex("ReplaceForId")
                        .IsUnique();

                    b.HasIndex("VehicleId");

                    b.ToTable("vehicle_part_item");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.VehicleStage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("vehicle_stage_id");

                    b.Property<int>("ActualMaintenanceMileage")
                        .HasColumnType("int")
                        .HasColumnName("actual_maintenance_mileage");

                    b.Property<string>("ActualMaintenanceUnit")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("actual_maintenance_unit");

                    b.Property<DateTime>("DateOfImplementation")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_of_implementation");

                    b.Property<Guid>("MaintenanceStageId")
                        .HasColumnType("char(36)")
                        .HasColumnName("maintenance_stage_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("status");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceStageId");

                    b.HasIndex("VehicleId");

                    b.ToTable("vehicle_stage");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Appointment", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.Staff", "ApproveBy")
                        .WithMany("Appointments")
                        .HasForeignKey("ApproveById");

                    b.HasOne("eMotoCare.BO.Entities.Campaign", "Campaign")
                        .WithMany("Appointments")
                        .HasForeignKey("CampaignId");

                    b.HasOne("eMotoCare.BO.Entities.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.BO.Entities.ServiceCenter", "ServiceCenter")
                        .WithMany("Appointments")
                        .HasForeignKey("ServiceCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.BO.Entities.ServiceCenterSlot", "ServiceCenterSlot")
                        .WithMany()
                        .HasForeignKey("ServiceCenterSlotId");

                    b.HasOne("eMotoCare.BO.Entities.VehicleStage", "VehicleStage")
                        .WithMany("Appointments")
                        .HasForeignKey("VehicleStageId");

                    b.Navigation("ApproveBy");

                    b.Navigation("Campaign");

                    b.Navigation("Customer");

                    b.Navigation("ServiceCenter");

                    b.Navigation("ServiceCenterSlot");

                    b.Navigation("VehicleStage");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.BatteryCheck", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.EVCheckDetail", "EVCheckDetail")
                        .WithOne("BatteryCheck")
                        .HasForeignKey("eMotoCare.BO.Entities.BatteryCheck", "EVCheckDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.BO.Entities.PartItem", "PartItem")
                        .WithMany("BatteryChecks")
                        .HasForeignKey("PartItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EVCheckDetail");

                    b.Navigation("PartItem");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.CampaignDetail", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.Campaign", "Campaign")
                        .WithMany("CampaignDetails")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.BO.Entities.Part", "Part")
                        .WithMany("CampaignDetails")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Customer", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.Account", "Account")
                        .WithOne("Customer")
                        .HasForeignKey("eMotoCare.BO.Entities.Customer", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.EVCheck", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.Appointment", "Appointment")
                        .WithOne("EVCheck")
                        .HasForeignKey("eMotoCare.BO.Entities.EVCheck", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.BO.Entities.Staff", "TaskExecutor")
                        .WithMany("EVChecks")
                        .HasForeignKey("TaskExecutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("TaskExecutor");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.EVCheckDetail", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.CampaignDetail", "CampaignDetail")
                        .WithMany("EVCheckDetails")
                        .HasForeignKey("CampaignDetailId");

                    b.HasOne("eMotoCare.BO.Entities.EVCheck", "EVCheck")
                        .WithMany("EVCheckDetails")
                        .HasForeignKey("EVCheckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.BO.Entities.MaintenanceStageDetail", "MaintenanceStageDetail")
                        .WithOne("EVCheckDetail")
                        .HasForeignKey("eMotoCare.BO.Entities.EVCheckDetail", "MaintenanceStageDetailId");

                    b.HasOne("eMotoCare.BO.Entities.PartItem", "PartItem")
                        .WithMany("EVCheckDetails")
                        .HasForeignKey("PartItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.BO.Entities.PartItem", "ReplacePart")
                        .WithOne("ReplcePart")
                        .HasForeignKey("eMotoCare.BO.Entities.EVCheckDetail", "ReplacePartId");

                    b.Navigation("CampaignDetail");

                    b.Navigation("EVCheck");

                    b.Navigation("MaintenanceStageDetail");

                    b.Navigation("PartItem");

                    b.Navigation("ReplacePart");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.ExportNote", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.Staff", "ExportBy")
                        .WithMany("ExportNotes")
                        .HasForeignKey("ExportById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.BO.Entities.ServiceCenter", "ServiceCenter")
                        .WithMany("ExportNotes")
                        .HasForeignKey("ServiceCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExportBy");

                    b.Navigation("ServiceCenter");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.ImportNote", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.Staff", "ImportBy")
                        .WithMany("ImportNotes")
                        .HasForeignKey("ImportById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.BO.Entities.ServiceCenter", "ServiceCenter")
                        .WithMany("ImportNotes")
                        .HasForeignKey("ServiceCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImportBy");

                    b.Navigation("ServiceCenter");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.MaintenanceStage", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.MaintenancePlan", "MaintenancePlan")
                        .WithMany("MaintenanceStages")
                        .HasForeignKey("MaintenancePlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaintenancePlan");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.MaintenanceStageDetail", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.MaintenanceStage", "MaintenanceStage")
                        .WithMany("MaintenanceStageDetails")
                        .HasForeignKey("MaintenanceStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.BO.Entities.Part", "Part")
                        .WithMany("MaintenanceStageDetails")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaintenanceStage");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Model", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.MaintenancePlan", "MaintenancePlan")
                        .WithMany("Models")
                        .HasForeignKey("MaintenancePlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaintenancePlan");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.ModelPartType", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.Model", "Model")
                        .WithMany("ModelPartTypes")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.BO.Entities.PartType", "PartType")
                        .WithMany("ModelPartTypes")
                        .HasForeignKey("PartTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");

                    b.Navigation("PartType");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Part", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.PartType", "PartType")
                        .WithMany("Parts")
                        .HasForeignKey("PartTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartType");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.PartItem", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.ExportNote", "ExportNote")
                        .WithMany("PartItems")
                        .HasForeignKey("ExportNoteId");

                    b.HasOne("eMotoCare.BO.Entities.ImportNote", "ImportNote")
                        .WithMany("PartItems")
                        .HasForeignKey("ImportNoteId");

                    b.HasOne("eMotoCare.BO.Entities.Part", "Part")
                        .WithMany("PartItems")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExportNote");

                    b.Navigation("ImportNote");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Payment", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.Appointment", "Appointment")
                        .WithMany("Payments")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.BO.Entities.Customer", "Customer")
                        .WithMany("Payments")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.PriceService", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.PartType", "PartType")
                        .WithMany("PriceServices")
                        .HasForeignKey("PartTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartType");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.RMA", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.Staff", "Staff")
                        .WithMany("RMAs")
                        .HasForeignKey("CreateById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.BO.Entities.Customer", "Customer")
                        .WithMany("RMAs")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.RMADetail", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.EVCheckDetail", "EVCheckDetail")
                        .WithOne("RMADetail")
                        .HasForeignKey("eMotoCare.BO.Entities.RMADetail", "EVCheckDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.BO.Entities.PartItem", "PartItem")
                        .WithMany("RMADetails")
                        .HasForeignKey("PartItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.BO.Entities.RMA", "RMA")
                        .WithMany("RMADetails")
                        .HasForeignKey("RMAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EVCheckDetail");

                    b.Navigation("PartItem");

                    b.Navigation("RMA");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.ServiceCenterInventory", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.PartItem", "PartItem")
                        .WithOne("ServiceCenterInventory")
                        .HasForeignKey("eMotoCare.BO.Entities.ServiceCenterInventory", "PartItemId");

                    b.HasOne("eMotoCare.BO.Entities.ServiceCenter", "ServiceCenter")
                        .WithMany("ServiceCenterInventories")
                        .HasForeignKey("ServiceCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartItem");

                    b.Navigation("ServiceCenter");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.ServiceCenterSlot", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.ServiceCenter", "ServiceCenter")
                        .WithMany()
                        .HasForeignKey("ServiceCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceCenter");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Staff", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.Account", "Account")
                        .WithOne("Staff")
                        .HasForeignKey("eMotoCare.BO.Entities.Staff", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.BO.Entities.ServiceCenter", "ServiceCenter")
                        .WithMany("Staffs")
                        .HasForeignKey("ServiceCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("ServiceCenter");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Vehicle", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.Customer", "Customer")
                        .WithMany("Vehilces")
                        .HasForeignKey("CustomerId");

                    b.HasOne("eMotoCare.BO.Entities.Model", "Model")
                        .WithMany("Vehicles")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.VehiclePartItem", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.PartItem", "PartItem")
                        .WithMany("VehiclePartItems")
                        .HasForeignKey("PartItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.BO.Entities.PartItem", "ReplaceFor")
                        .WithOne("ReplaceFor")
                        .HasForeignKey("eMotoCare.BO.Entities.VehiclePartItem", "ReplaceForId");

                    b.HasOne("eMotoCare.BO.Entities.Vehicle", "Vehicle")
                        .WithMany("VehiclePartItems")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartItem");

                    b.Navigation("ReplaceFor");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.VehicleStage", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.MaintenanceStage", "MaintenanceStage")
                        .WithMany("VehicleStages")
                        .HasForeignKey("MaintenanceStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.BO.Entities.Vehicle", "Vehicle")
                        .WithMany("VehicleStages")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaintenanceStage");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Account", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Appointment", b =>
                {
                    b.Navigation("EVCheck");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Campaign", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("CampaignDetails");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.CampaignDetail", b =>
                {
                    b.Navigation("EVCheckDetails");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Customer", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Payments");

                    b.Navigation("RMAs");

                    b.Navigation("Vehilces");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.EVCheck", b =>
                {
                    b.Navigation("EVCheckDetails");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.EVCheckDetail", b =>
                {
                    b.Navigation("BatteryCheck");

                    b.Navigation("RMADetail");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.ExportNote", b =>
                {
                    b.Navigation("PartItems");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.ImportNote", b =>
                {
                    b.Navigation("PartItems");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.MaintenancePlan", b =>
                {
                    b.Navigation("MaintenanceStages");

                    b.Navigation("Models");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.MaintenanceStage", b =>
                {
                    b.Navigation("MaintenanceStageDetails");

                    b.Navigation("VehicleStages");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.MaintenanceStageDetail", b =>
                {
                    b.Navigation("EVCheckDetail");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Model", b =>
                {
                    b.Navigation("ModelPartTypes");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Part", b =>
                {
                    b.Navigation("CampaignDetails");

                    b.Navigation("MaintenanceStageDetails");

                    b.Navigation("PartItems");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.PartItem", b =>
                {
                    b.Navigation("BatteryChecks");

                    b.Navigation("EVCheckDetails");

                    b.Navigation("RMADetails");

                    b.Navigation("ReplaceFor");

                    b.Navigation("ReplcePart");

                    b.Navigation("ServiceCenterInventory");

                    b.Navigation("VehiclePartItems");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.PartType", b =>
                {
                    b.Navigation("ModelPartTypes");

                    b.Navigation("Parts");

                    b.Navigation("PriceServices");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.RMA", b =>
                {
                    b.Navigation("RMADetails");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.ServiceCenter", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("ExportNotes");

                    b.Navigation("ImportNotes");

                    b.Navigation("ServiceCenterInventories");

                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Staff", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("EVChecks");

                    b.Navigation("ExportNotes");

                    b.Navigation("ImportNotes");

                    b.Navigation("RMAs");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Vehicle", b =>
                {
                    b.Navigation("VehiclePartItems");

                    b.Navigation("VehicleStages");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.VehicleStage", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
