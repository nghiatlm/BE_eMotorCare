// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eMotoCare.DAL.context;

#nullable disable

namespace eMotoCare.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251015142043_InitCreateDatabase")]
    partial class InitCreateDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("eMotoCare.BO.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ApproveById")
                        .HasColumnType("char(36)")
                        .HasColumnName("approve_by_id");

                    b.Property<Guid?>("CampaignId")
                        .HasColumnType("char(36)")
                        .HasColumnName("campaign_id");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_id");

                    b.Property<Guid?>("VehicleStageId")
                        .HasColumnType("char(36)")
                        .HasColumnName("vehicle_stage_id");

                    b.HasKey("Id");

                    b.HasIndex("ApproveById");

                    b.HasIndex("CampaignId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("VehicleStageId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.BatteryCheck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EVCheckDetailId")
                        .HasColumnType("char(36)")
                        .HasColumnName("ev_check_detail_id");

                    b.Property<Guid>("PartItemId")
                        .HasColumnType("char(36)")
                        .HasColumnName("part_item_id");

                    b.HasKey("Id");

                    b.HasIndex("EVCheckDetailId")
                        .IsUnique();

                    b.HasIndex("PartItemId");

                    b.ToTable("BatteryChecks");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.CampaignDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("char(36)")
                        .HasColumnName("campaign_id");

                    b.Property<Guid>("PartId")
                        .HasColumnType("char(36)")
                        .HasColumnName("part_id");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("PartId");

                    b.ToTable("CampaignDetails");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("char(36)")
                        .HasColumnName("account_id");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.EVCheck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("char(36)")
                        .HasColumnName("appointment_id");

                    b.Property<Guid>("TaskExecutorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("task_executor_id");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.HasIndex("TaskExecutorId");

                    b.ToTable("EVChecks");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.EVCheckDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CampaignDetailId")
                        .HasColumnType("char(36)")
                        .HasColumnName("campaign_detail_id");

                    b.Property<Guid>("EVCheckId")
                        .HasColumnType("char(36)")
                        .HasColumnName("ev_check_id");

                    b.Property<Guid?>("MaintenanceStageDetailId")
                        .HasColumnType("char(36)")
                        .HasColumnName("maintenance_stage_detail_id");

                    b.Property<Guid>("PartItemId")
                        .HasColumnType("char(36)")
                        .HasColumnName("part_item_id");

                    b.Property<Guid?>("ReplacePartId")
                        .HasColumnType("char(36)")
                        .HasColumnName("replace_part_id");

                    b.HasKey("Id");

                    b.HasIndex("CampaignDetailId");

                    b.HasIndex("EVCheckId");

                    b.HasIndex("MaintenanceStageDetailId")
                        .IsUnique();

                    b.HasIndex("PartItemId");

                    b.HasIndex("ReplacePartId")
                        .IsUnique();

                    b.ToTable("EVCheckDetails");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.ExportNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ExportById")
                        .HasColumnType("char(36)")
                        .HasColumnName("export_by_id");

                    b.Property<Guid>("ServiceCenterId")
                        .HasColumnType("char(36)")
                        .HasColumnName("service_center_id");

                    b.HasKey("Id");

                    b.HasIndex("ExportById");

                    b.HasIndex("ServiceCenterId");

                    b.ToTable("ExportNotes");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.ImportNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ImportById")
                        .HasColumnType("char(36)")
                        .HasColumnName("import_by_id");

                    b.Property<Guid>("ServiceCenterId")
                        .HasColumnType("char(36)")
                        .HasColumnName("service_center_id");

                    b.HasKey("Id");

                    b.HasIndex("ImportById");

                    b.HasIndex("ServiceCenterId");

                    b.ToTable("ImportNotes");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.MaintenancePlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("MaintenancePlans");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.MaintenanceStage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("MaintenancePlanId")
                        .HasColumnType("char(36)")
                        .HasColumnName("maintenance_plan_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("MaintenancePlanId");

                    b.ToTable("MaintenanceStages");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.MaintenanceStageDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("MaintenanceStageId")
                        .HasColumnType("char(36)")
                        .HasColumnName("maintenance_stage_id");

                    b.Property<Guid>("PartId")
                        .HasColumnType("char(36)")
                        .HasColumnName("part_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceStageId");

                    b.HasIndex("PartId");

                    b.ToTable("MaintenanceStageDetails");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Model", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("MaintenancePlanId")
                        .HasColumnType("char(36)")
                        .HasColumnName("maintenance_plan_id");

                    b.HasKey("Id");

                    b.HasIndex("MaintenancePlanId");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.ModelPartType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("char(36)")
                        .HasColumnName("model_id");

                    b.Property<Guid>("PartTypeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("part_type_id");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.HasIndex("PartTypeId");

                    b.ToTable("ModelPartTypes");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Part", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("PartTypeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("part_type_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("PartTypeId");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.PartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ExportNoteId")
                        .HasColumnType("char(36)")
                        .HasColumnName("export_note_id");

                    b.Property<Guid?>("ImportNoteId")
                        .HasColumnType("char(36)")
                        .HasColumnName("import_note_id");

                    b.Property<Guid>("PartId")
                        .HasColumnType("char(36)")
                        .HasColumnName("part_id");

                    b.HasKey("Id");

                    b.HasIndex("ExportNoteId");

                    b.HasIndex("ImportNoteId");

                    b.HasIndex("PartId");

                    b.ToTable("PartItems");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.PartType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("PartTypes");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("char(36)")
                        .HasColumnName("appointment_id");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_id");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("CustomerID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.PriceService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("PartTypeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("part_type_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("PartTypeId");

                    b.ToTable("PriceServices");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.RMA", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CreateById")
                        .HasColumnType("char(36)")
                        .HasColumnName("create_by_id");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_id");

                    b.HasKey("Id");

                    b.HasIndex("CreateById");

                    b.HasIndex("CustomerId");

                    b.ToTable("RMAs");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.RMADetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EVCheckDetailId")
                        .HasColumnType("char(36)")
                        .HasColumnName("ev_check_detail_id");

                    b.Property<Guid>("PartItemId")
                        .HasColumnType("char(36)")
                        .HasColumnName("part_item_id");

                    b.Property<Guid>("RMAId")
                        .HasColumnType("char(36)")
                        .HasColumnName("rma_id");

                    b.HasKey("Id");

                    b.HasIndex("EVCheckDetailId")
                        .IsUnique();

                    b.HasIndex("PartItemId");

                    b.HasIndex("RMAId");

                    b.ToTable("RMADetails");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.ServiceCenter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("ServiceCenters");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.ServiceCenterInventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PartItemId")
                        .HasColumnType("char(36)")
                        .HasColumnName("part_item_id");

                    b.Property<Guid>("ServiceCenterId")
                        .HasColumnType("char(36)")
                        .HasColumnName("service_center_id");

                    b.HasKey("Id");

                    b.HasIndex("PartItemId")
                        .IsUnique();

                    b.HasIndex("ServiceCenterId");

                    b.ToTable("ServiceCenterInventorys");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("char(36)")
                        .HasColumnName("account_id");

                    b.Property<Guid?>("ServiceCenterId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("ServiceCenterId");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_id");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("char(36)")
                        .HasColumnName("model_id");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ModelId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.VehiclePartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PartItemId")
                        .HasColumnType("char(36)")
                        .HasColumnName("part_item_id");

                    b.Property<Guid?>("ReplaceForId")
                        .HasColumnType("char(36)")
                        .HasColumnName("replace_for_id");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id");

                    b.HasIndex("PartItemId");

                    b.HasIndex("ReplaceForId")
                        .IsUnique();

                    b.HasIndex("VehicleId");

                    b.ToTable("VehiclePartItems");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.VehicleStage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("MaintenanceStageId")
                        .HasColumnType("char(36)")
                        .HasColumnName("maintenance_stage_id");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceStageId");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleStages");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Appointment", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.Staff", "ApproveBy")
                        .WithMany("Appointments")
                        .HasForeignKey("ApproveById");

                    b.HasOne("eMotoCare.BO.Entities.Campaign", "Campaign")
                        .WithMany("Appointments")
                        .HasForeignKey("CampaignId");

                    b.HasOne("eMotoCare.BO.Entities.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId");

                    b.HasOne("eMotoCare.BO.Entities.VehicleStage", "VehicleStage")
                        .WithMany("Appointments")
                        .HasForeignKey("VehicleStageId");

                    b.Navigation("ApproveBy");

                    b.Navigation("Campaign");

                    b.Navigation("Customer");

                    b.Navigation("VehicleStage");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.BatteryCheck", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.EVCheckDetail", "EVCheckDetail")
                        .WithOne("BatteryCheck")
                        .HasForeignKey("eMotoCare.BO.Entities.BatteryCheck", "EVCheckDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.BO.Entities.PartItem", "PartItem")
                        .WithMany("BatteryChecks")
                        .HasForeignKey("PartItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EVCheckDetail");

                    b.Navigation("PartItem");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.CampaignDetail", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.Campaign", "Campaign")
                        .WithMany("CampaignDetails")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.BO.Entities.Part", "Part")
                        .WithMany("CampaignDetails")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Customer", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.Account", "Account")
                        .WithOne("Customer")
                        .HasForeignKey("eMotoCare.BO.Entities.Customer", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.EVCheck", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.Appointment", "Appointment")
                        .WithOne("EVCheck")
                        .HasForeignKey("eMotoCare.BO.Entities.EVCheck", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.BO.Entities.Staff", "Staff")
                        .WithMany("EVChecks")
                        .HasForeignKey("TaskExecutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.EVCheckDetail", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.CampaignDetail", "CampaignDetail")
                        .WithMany("EVCheckDetails")
                        .HasForeignKey("CampaignDetailId");

                    b.HasOne("eMotoCare.BO.Entities.EVCheck", "EVCheck")
                        .WithMany("EVCheckDetails")
                        .HasForeignKey("EVCheckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.BO.Entities.MaintenanceStageDetail", "MaintenanceStageDetail")
                        .WithOne("EVCheckDetail")
                        .HasForeignKey("eMotoCare.BO.Entities.EVCheckDetail", "MaintenanceStageDetailId");

                    b.HasOne("eMotoCare.BO.Entities.PartItem", "PartItem")
                        .WithMany("EVCheckDetails")
                        .HasForeignKey("PartItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.BO.Entities.PartItem", "ReplacePart")
                        .WithOne("ReplcePart")
                        .HasForeignKey("eMotoCare.BO.Entities.EVCheckDetail", "ReplacePartId");

                    b.Navigation("CampaignDetail");

                    b.Navigation("EVCheck");

                    b.Navigation("MaintenanceStageDetail");

                    b.Navigation("PartItem");

                    b.Navigation("ReplacePart");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.ExportNote", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.Staff", "ExportBy")
                        .WithMany("ExportNotes")
                        .HasForeignKey("ExportById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.BO.Entities.ServiceCenter", "ServiceCenter")
                        .WithMany("ExportNotes")
                        .HasForeignKey("ServiceCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExportBy");

                    b.Navigation("ServiceCenter");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.ImportNote", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.Staff", "ImportBy")
                        .WithMany("ImportNotes")
                        .HasForeignKey("ImportById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.BO.Entities.ServiceCenter", "ServiceCenter")
                        .WithMany("ImportNotes")
                        .HasForeignKey("ServiceCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImportBy");

                    b.Navigation("ServiceCenter");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.MaintenanceStage", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.MaintenancePlan", "MaintenancePlan")
                        .WithMany("MaintenanceStages")
                        .HasForeignKey("MaintenancePlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaintenancePlan");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.MaintenanceStageDetail", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.MaintenanceStage", "MaintenanceStage")
                        .WithMany("MaintenanceStageDetails")
                        .HasForeignKey("MaintenanceStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.BO.Entities.Part", "Part")
                        .WithMany("MaintenanceStageDetails")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaintenanceStage");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Model", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.MaintenancePlan", "MaintenancePlan")
                        .WithMany("Models")
                        .HasForeignKey("MaintenancePlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaintenancePlan");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.ModelPartType", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.Model", "Model")
                        .WithMany("ModelPartTypes")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.BO.Entities.PartType", "PartType")
                        .WithMany("ModelPartTypes")
                        .HasForeignKey("PartTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");

                    b.Navigation("PartType");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Part", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.PartType", "PartType")
                        .WithMany("Parts")
                        .HasForeignKey("PartTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartType");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.PartItem", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.ExportNote", "ExportNote")
                        .WithMany("PartItems")
                        .HasForeignKey("ExportNoteId");

                    b.HasOne("eMotoCare.BO.Entities.ImportNote", "ImportNote")
                        .WithMany("PartItems")
                        .HasForeignKey("ImportNoteId");

                    b.HasOne("eMotoCare.BO.Entities.Part", "Part")
                        .WithMany("PartItems")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExportNote");

                    b.Navigation("ImportNote");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Payment", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.Appointment", "Appointment")
                        .WithMany("Payments")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.BO.Entities.Customer", "Customer")
                        .WithMany("Payments")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.PriceService", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.PartType", "PartType")
                        .WithMany("PriceServices")
                        .HasForeignKey("PartTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartType");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.RMA", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.Staff", "Staff")
                        .WithMany("RMAs")
                        .HasForeignKey("CreateById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.BO.Entities.Customer", "Customer")
                        .WithMany("RMAs")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.RMADetail", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.EVCheckDetail", "EVCheckDetail")
                        .WithOne("RMADetail")
                        .HasForeignKey("eMotoCare.BO.Entities.RMADetail", "EVCheckDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.BO.Entities.PartItem", "PartItem")
                        .WithMany("RMADetails")
                        .HasForeignKey("PartItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.BO.Entities.RMA", "RMA")
                        .WithMany("RMADetails")
                        .HasForeignKey("RMAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EVCheckDetail");

                    b.Navigation("PartItem");

                    b.Navigation("RMA");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.ServiceCenterInventory", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.PartItem", "PartItem")
                        .WithOne("ServiceCenterInventory")
                        .HasForeignKey("eMotoCare.BO.Entities.ServiceCenterInventory", "PartItemId");

                    b.HasOne("eMotoCare.BO.Entities.ServiceCenter", "ServiceCenter")
                        .WithMany("ServiceCenterInventories")
                        .HasForeignKey("ServiceCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartItem");

                    b.Navigation("ServiceCenter");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Staff", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.Account", "Account")
                        .WithOne("Staff")
                        .HasForeignKey("eMotoCare.BO.Entities.Staff", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.BO.Entities.ServiceCenter", null)
                        .WithMany("Staffs")
                        .HasForeignKey("ServiceCenterId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Vehicle", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.Customer", "Customer")
                        .WithMany("Vehilces")
                        .HasForeignKey("CustomerId");

                    b.HasOne("eMotoCare.BO.Entities.Model", "Model")
                        .WithMany("Vehicles")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.VehiclePartItem", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.PartItem", "PartItem")
                        .WithMany("VehiclePartItems")
                        .HasForeignKey("PartItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.BO.Entities.PartItem", "ReplaceFor")
                        .WithOne("ReplaceFor")
                        .HasForeignKey("eMotoCare.BO.Entities.VehiclePartItem", "ReplaceForId");

                    b.HasOne("eMotoCare.BO.Entities.Vehicle", "Vehicle")
                        .WithMany("VehiclePartItems")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartItem");

                    b.Navigation("ReplaceFor");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.VehicleStage", b =>
                {
                    b.HasOne("eMotoCare.BO.Entities.MaintenanceStage", "MaintenanceStage")
                        .WithMany("VehicleStages")
                        .HasForeignKey("MaintenanceStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.BO.Entities.Vehicle", "Vehicle")
                        .WithMany("VehicleStages")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaintenanceStage");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Account", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Appointment", b =>
                {
                    b.Navigation("EVCheck");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Campaign", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("CampaignDetails");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.CampaignDetail", b =>
                {
                    b.Navigation("EVCheckDetails");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Customer", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Payments");

                    b.Navigation("RMAs");

                    b.Navigation("Vehilces");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.EVCheck", b =>
                {
                    b.Navigation("EVCheckDetails");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.EVCheckDetail", b =>
                {
                    b.Navigation("BatteryCheck");

                    b.Navigation("RMADetail");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.ExportNote", b =>
                {
                    b.Navigation("PartItems");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.ImportNote", b =>
                {
                    b.Navigation("PartItems");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.MaintenancePlan", b =>
                {
                    b.Navigation("MaintenanceStages");

                    b.Navigation("Models");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.MaintenanceStage", b =>
                {
                    b.Navigation("MaintenanceStageDetails");

                    b.Navigation("VehicleStages");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.MaintenanceStageDetail", b =>
                {
                    b.Navigation("EVCheckDetail");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Model", b =>
                {
                    b.Navigation("ModelPartTypes");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Part", b =>
                {
                    b.Navigation("CampaignDetails");

                    b.Navigation("MaintenanceStageDetails");

                    b.Navigation("PartItems");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.PartItem", b =>
                {
                    b.Navigation("BatteryChecks");

                    b.Navigation("EVCheckDetails");

                    b.Navigation("RMADetails");

                    b.Navigation("ReplaceFor");

                    b.Navigation("ReplcePart");

                    b.Navigation("ServiceCenterInventory");

                    b.Navigation("VehiclePartItems");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.PartType", b =>
                {
                    b.Navigation("ModelPartTypes");

                    b.Navigation("Parts");

                    b.Navigation("PriceServices");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.RMA", b =>
                {
                    b.Navigation("RMADetails");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.ServiceCenter", b =>
                {
                    b.Navigation("ExportNotes");

                    b.Navigation("ImportNotes");

                    b.Navigation("ServiceCenterInventories");

                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Staff", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("EVChecks");

                    b.Navigation("ExportNotes");

                    b.Navigation("ImportNotes");

                    b.Navigation("RMAs");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.Vehicle", b =>
                {
                    b.Navigation("VehiclePartItems");

                    b.Navigation("VehicleStages");
                });

            modelBuilder.Entity("eMotoCare.BO.Entities.VehicleStage", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
