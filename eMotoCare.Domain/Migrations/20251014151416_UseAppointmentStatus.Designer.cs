// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eMotoCare.DAL.Context;

#nullable disable

namespace eMotoCare.DAL.Migrations
{
    [DbContext(typeof(DBContextMotoCare))]
    [Migration("20251014151416_UseAppointmentStatus")]
    partial class UseAppointmentStatus
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("eMotoCare.DAL.Entities.Account", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AccountStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("StaffId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("AccountId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.HasIndex("StaffId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.Appointment", b =>
                {
                    b.Property<Guid>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ApproveById")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("char(36)");

                    b.Property<string>("CheckinQR")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("char(36)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("VehicleStageId")
                        .HasColumnType("char(36)");

                    b.HasKey("AppointmentId");

                    b.HasIndex("ApproveById");

                    b.HasIndex("BranchId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("VehicleStageId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.BatteryCheck", b =>
                {
                    b.Property<Guid>("BatteryCheckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BatteryLevel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CheckDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("EVCheckDetailId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Voltage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("BatteryCheckId");

                    b.HasIndex("EVCheckDetailId");

                    b.ToTable("BatteryChecks");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.Branch", b =>
                {
                    b.Property<Guid>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<Guid?>("ManageById")
                        .HasColumnType("char(36)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("ServiceCenterId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("BranchId");

                    b.HasIndex("Address")
                        .IsUnique();

                    b.HasIndex("BranchName")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("ManageById")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("ServiceCenterId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.BranchInventory", b =>
                {
                    b.Property<Guid>("BranchInventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("BranchInventoryId");

                    b.HasIndex("BranchId");

                    b.ToTable("BranchInventories");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.BranchInventoryExport", b =>
                {
                    b.Property<Guid>("BranchInventoryExportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BranchInventoryId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ExportNoteId")
                        .HasColumnType("char(36)");

                    b.HasKey("BranchInventoryExportId");

                    b.HasIndex("BranchInventoryId");

                    b.HasIndex("ExportNoteId");

                    b.ToTable("BranchInventoryExports");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.Campaign", b =>
                {
                    b.Property<Guid>("CampaignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CampaignName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("CampaignId");

                    b.HasIndex("CampaignName")
                        .IsUnique();

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.CampaignDetail", b =>
                {
                    b.Property<Guid>("CampaignDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("EVCheckDetailId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PartId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("CampaignDetailId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("EVCheckDetailId");

                    b.HasIndex("PartId");

                    b.ToTable("CampaignDetails");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.Customer", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Avatar")
                        .HasColumnType("longtext");

                    b.Property<string>("CitizenId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("CustomerId");

                    b.HasIndex("CitizenId")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.EVCheck", b =>
                {
                    b.Property<Guid>("EVCheckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CheckDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("TaskExecutorId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("EVCheckId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("TaskExecutorId");

                    b.ToTable("EVChecks");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.EVCheckDetail", b =>
                {
                    b.Property<Guid>("EVCheckDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CheckResult")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("EVCheckId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("PartItemId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("PricePart")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PriceService")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Remedies")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SparePart")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("EVCheckDetailId");

                    b.HasIndex("EVCheckId");

                    b.HasIndex("PartItemId");

                    b.ToTable("EVCheckDetails");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.ExportNote", b =>
                {
                    b.Property<Guid>("ExportNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExportDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<int>("NumberOfRequest")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ExportNoteId");

                    b.HasIndex("BranchId");

                    b.ToTable("ExportNotes");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.ImportNote", b =>
                {
                    b.Property<Guid>("ImportNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ImportDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ImportNoteId");

                    b.HasIndex("BranchId");

                    b.ToTable("ImportNotes");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.MaintenaceStage", b =>
                {
                    b.Property<Guid>("MaintenaceStageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("MaintenancePlanId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("StageName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("StageOrder")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("MaintenaceStageId");

                    b.HasIndex("MaintenancePlanId");

                    b.ToTable("MaintenaceStages");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.MaintenaceStageDetail", b =>
                {
                    b.Property<Guid>("MaintenaceStageDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("MaintenaceStageId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("PartId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ServiceTask")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("MaintenaceStageDetailId");

                    b.HasIndex("MaintenaceStageId");

                    b.HasIndex("PartId");

                    b.ToTable("MaintenaceStageDetails");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.MaintenancePlan", b =>
                {
                    b.Property<Guid>("MaintenancePlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IntervalType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IntervalUnit")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PlanCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TotalStage")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("MaintenancePlanId");

                    b.ToTable("MaintenancePlans");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.Model", b =>
                {
                    b.Property<Guid>("ModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<Guid>("MaintenancePlanId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ModelId");

                    b.HasIndex("MaintenancePlanId");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.ModelPartType", b =>
                {
                    b.Property<Guid>("ModelPartTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PartTypeId")
                        .HasColumnType("char(36)");

                    b.HasKey("ModelPartTypeId");

                    b.HasIndex("ModelId");

                    b.HasIndex("PartTypeId");

                    b.ToTable("ModelPartTypes");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.Part", b =>
                {
                    b.Property<Guid>("PartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PartCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PartName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("PartTypeId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("PartId");

                    b.HasIndex("PartTypeId");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.PartItem", b =>
                {
                    b.Property<Guid>("PartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BranchInventoryId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ExportNoteId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ImportNoteId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PartId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("WarrantyExpire")
                        .HasColumnType("datetime(6)");

                    b.HasKey("PartItemId");

                    b.HasIndex("BranchInventoryId");

                    b.HasIndex("ExportNoteId");

                    b.HasIndex("ImportNoteId");

                    b.HasIndex("PartId");

                    b.HasIndex("SerialNumber")
                        .IsUnique();

                    b.ToTable("PartItems");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.PartType", b =>
                {
                    b.Property<Guid>("PartTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("PartTypeId");

                    b.ToTable("PartTypes");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("PayerId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("PaymentId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("PayerId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.PriceService", b =>
                {
                    b.Property<Guid>("PriceServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("LaborCost")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("PartTypeId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Remedies")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("PriceServiceId");

                    b.HasIndex("PartTypeId");

                    b.ToTable("PriceServices");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.RMA", b =>
                {
                    b.Property<Guid>("RMAId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("RMADate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RMAStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("RMAId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CustomerId");

                    b.ToTable("RMAs");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.RMADetail", b =>
                {
                    b.Property<Guid>("RMADetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CheckResult")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("EVCheckDetailId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ExpirationDateRMA")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Inspector")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("PartItemId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("RMAId")
                        .HasColumnType("char(36)");

                    b.Property<string>("RMANumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ReleaseDateRMA")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ReplacePartId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ReturnAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Solution")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("RMADetailId");

                    b.HasIndex("EVCheckDetailId");

                    b.HasIndex("PartItemId");

                    b.HasIndex("RMAId");

                    b.ToTable("RMADetails");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.ServiceCenter", b =>
                {
                    b.Property<Guid>("ServiceCenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CenterName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ServiceCenterId");

                    b.ToTable("ServiceCenters");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.Staff", b =>
                {
                    b.Property<Guid>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Avatar")
                        .HasColumnType("longtext");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("char(36)");

                    b.Property<string>("CitizenId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("StaffCode")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("StaffPosition")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("StaffId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CitizenId")
                        .IsUnique();

                    b.HasIndex("StaffCode")
                        .IsUnique();

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("char(36)");

                    b.Property<string>("EngineNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("ManufactureYear")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("VehicleImage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("VinNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("VehicleId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EngineNumber")
                        .IsUnique();

                    b.HasIndex("ModelId");

                    b.HasIndex("VinNumber")
                        .IsUnique();

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.VehiclePartItem", b =>
                {
                    b.Property<Guid>("VehiclePartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("InstalledDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("PartItemId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ReplaceForId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("char(36)");

                    b.HasKey("VehiclePartItemId");

                    b.HasIndex("PartItemId");

                    b.HasIndex("ReplaceForId");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehiclePartItems");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.VehicleStage", b =>
                {
                    b.Property<Guid>("VehicleStageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfImplementation")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("MaintenaceStageDetailId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("char(36)");

                    b.HasKey("VehicleStageId");

                    b.HasIndex("MaintenaceStageDetailId");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleStages");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.Account", b =>
                {
                    b.HasOne("eMotoCare.DAL.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("eMotoCare.DAL.Entities.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId");

                    b.Navigation("Customer");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.Appointment", b =>
                {
                    b.HasOne("eMotoCare.DAL.Entities.Staff", "ApproveBy")
                        .WithMany("Appointments")
                        .HasForeignKey("ApproveById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.DAL.Entities.Branch", "Branch")
                        .WithMany("Appointments")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.DAL.Entities.Campaign", "Campaign")
                        .WithMany("Appointments")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.DAL.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.DAL.Entities.VehicleStage", "VehicleStage")
                        .WithMany("Appointments")
                        .HasForeignKey("VehicleStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApproveBy");

                    b.Navigation("Branch");

                    b.Navigation("Campaign");

                    b.Navigation("Customer");

                    b.Navigation("VehicleStage");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.BatteryCheck", b =>
                {
                    b.HasOne("eMotoCare.DAL.Entities.EVCheckDetail", "EVCheckDetail")
                        .WithMany()
                        .HasForeignKey("EVCheckDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EVCheckDetail");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.Branch", b =>
                {
                    b.HasOne("eMotoCare.DAL.Entities.Staff", "ManageBy")
                        .WithOne()
                        .HasForeignKey("eMotoCare.DAL.Entities.Branch", "ManageById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("eMotoCare.DAL.Entities.ServiceCenter", "ServiceCenter")
                        .WithMany("Branches")
                        .HasForeignKey("ServiceCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ManageBy");

                    b.Navigation("ServiceCenter");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.BranchInventory", b =>
                {
                    b.HasOne("eMotoCare.DAL.Entities.Branch", "Branch")
                        .WithMany("BranchInventories")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.BranchInventoryExport", b =>
                {
                    b.HasOne("eMotoCare.DAL.Entities.BranchInventory", "BranchInventory")
                        .WithMany("BranchInventoryExports")
                        .HasForeignKey("BranchInventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.DAL.Entities.ExportNote", "ExportNote")
                        .WithMany("BranchInventoryExports")
                        .HasForeignKey("ExportNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BranchInventory");

                    b.Navigation("ExportNote");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.CampaignDetail", b =>
                {
                    b.HasOne("eMotoCare.DAL.Entities.Campaign", "Campaign")
                        .WithMany("CampaignDetails")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.DAL.Entities.EVCheckDetail", "EVCheckDetail")
                        .WithMany()
                        .HasForeignKey("EVCheckDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.DAL.Entities.Part", "Part")
                        .WithMany("CampaignDetails")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("EVCheckDetail");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.EVCheck", b =>
                {
                    b.HasOne("eMotoCare.DAL.Entities.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.DAL.Entities.Staff", "TaskExecutor")
                        .WithMany("EVChecks")
                        .HasForeignKey("TaskExecutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("TaskExecutor");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.EVCheckDetail", b =>
                {
                    b.HasOne("eMotoCare.DAL.Entities.EVCheck", "EVCheck")
                        .WithMany("EVCheckDetails")
                        .HasForeignKey("EVCheckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.DAL.Entities.PartItem", "PartItem")
                        .WithMany("EVCheckDetails")
                        .HasForeignKey("PartItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EVCheck");

                    b.Navigation("PartItem");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.ExportNote", b =>
                {
                    b.HasOne("eMotoCare.DAL.Entities.Branch", "Branch")
                        .WithMany("ExportNotes")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.ImportNote", b =>
                {
                    b.HasOne("eMotoCare.DAL.Entities.Branch", "Branch")
                        .WithMany("ImportNotes")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.MaintenaceStage", b =>
                {
                    b.HasOne("eMotoCare.DAL.Entities.MaintenancePlan", "MaintenancePlan")
                        .WithMany("MaintenaceStages")
                        .HasForeignKey("MaintenancePlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaintenancePlan");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.MaintenaceStageDetail", b =>
                {
                    b.HasOne("eMotoCare.DAL.Entities.MaintenaceStage", "MaintenaceStage")
                        .WithMany("MaintenaceStageDetails")
                        .HasForeignKey("MaintenaceStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.DAL.Entities.Part", "Part")
                        .WithMany("MaintenaceStageDetails")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaintenaceStage");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.Model", b =>
                {
                    b.HasOne("eMotoCare.DAL.Entities.MaintenancePlan", "MaintenancePlan")
                        .WithMany("Models")
                        .HasForeignKey("MaintenancePlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaintenancePlan");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.ModelPartType", b =>
                {
                    b.HasOne("eMotoCare.DAL.Entities.Model", "Model")
                        .WithMany("ModelPartTypes")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.DAL.Entities.PartType", "PartType")
                        .WithMany("ModelPartTypes")
                        .HasForeignKey("PartTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");

                    b.Navigation("PartType");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.Part", b =>
                {
                    b.HasOne("eMotoCare.DAL.Entities.PartType", "PartType")
                        .WithMany("Parts")
                        .HasForeignKey("PartTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartType");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.PartItem", b =>
                {
                    b.HasOne("eMotoCare.DAL.Entities.BranchInventory", "BranchInventory")
                        .WithMany("PartItems")
                        .HasForeignKey("BranchInventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.DAL.Entities.ExportNote", "ExportNote")
                        .WithMany("PartItems")
                        .HasForeignKey("ExportNoteId");

                    b.HasOne("eMotoCare.DAL.Entities.ImportNote", "ImportNote")
                        .WithMany("PartItems")
                        .HasForeignKey("ImportNoteId");

                    b.HasOne("eMotoCare.DAL.Entities.Part", "Part")
                        .WithMany()
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BranchInventory");

                    b.Navigation("ExportNote");

                    b.Navigation("ImportNote");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.Payment", b =>
                {
                    b.HasOne("eMotoCare.DAL.Entities.Appointment", "Appointment")
                        .WithMany("Payments")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.DAL.Entities.Customer", "Payer")
                        .WithMany()
                        .HasForeignKey("PayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Payer");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.PriceService", b =>
                {
                    b.HasOne("eMotoCare.DAL.Entities.PartType", "PartType")
                        .WithMany("PriceServices")
                        .HasForeignKey("PartTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartType");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.RMA", b =>
                {
                    b.HasOne("eMotoCare.DAL.Entities.Staff", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.DAL.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.RMADetail", b =>
                {
                    b.HasOne("eMotoCare.DAL.Entities.EVCheckDetail", "EVCheckDetail")
                        .WithMany()
                        .HasForeignKey("EVCheckDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.DAL.Entities.PartItem", "PartItem")
                        .WithMany()
                        .HasForeignKey("PartItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.DAL.Entities.RMA", "RMA")
                        .WithMany("RMADetails")
                        .HasForeignKey("RMAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EVCheckDetail");

                    b.Navigation("PartItem");

                    b.Navigation("RMA");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.Staff", b =>
                {
                    b.HasOne("eMotoCare.DAL.Entities.Branch", "Branch")
                        .WithMany("Staffs")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.Vehicle", b =>
                {
                    b.HasOne("eMotoCare.DAL.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.DAL.Entities.Model", "Model")
                        .WithMany("Vehicles")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.VehiclePartItem", b =>
                {
                    b.HasOne("eMotoCare.DAL.Entities.PartItem", "PartItem")
                        .WithMany("VehiclePartItems")
                        .HasForeignKey("PartItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("eMotoCare.DAL.Entities.PartItem", "ReplaceFor")
                        .WithMany()
                        .HasForeignKey("ReplaceForId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("eMotoCare.DAL.Entities.Vehicle", "Vehicle")
                        .WithMany("VehiclePartItems")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartItem");

                    b.Navigation("ReplaceFor");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.VehicleStage", b =>
                {
                    b.HasOne("eMotoCare.DAL.Entities.MaintenaceStageDetail", "MaintenanceStageDetail")
                        .WithMany("VehicleStages")
                        .HasForeignKey("MaintenaceStageDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMotoCare.DAL.Entities.Vehicle", "Vehicle")
                        .WithMany("VehicleStages")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaintenanceStageDetail");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.Appointment", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.Branch", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("BranchInventories");

                    b.Navigation("ExportNotes");

                    b.Navigation("ImportNotes");

                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.BranchInventory", b =>
                {
                    b.Navigation("BranchInventoryExports");

                    b.Navigation("PartItems");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.Campaign", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("CampaignDetails");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.EVCheck", b =>
                {
                    b.Navigation("EVCheckDetails");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.ExportNote", b =>
                {
                    b.Navigation("BranchInventoryExports");

                    b.Navigation("PartItems");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.ImportNote", b =>
                {
                    b.Navigation("PartItems");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.MaintenaceStage", b =>
                {
                    b.Navigation("MaintenaceStageDetails");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.MaintenaceStageDetail", b =>
                {
                    b.Navigation("VehicleStages");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.MaintenancePlan", b =>
                {
                    b.Navigation("MaintenaceStages");

                    b.Navigation("Models");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.Model", b =>
                {
                    b.Navigation("ModelPartTypes");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.Part", b =>
                {
                    b.Navigation("CampaignDetails");

                    b.Navigation("MaintenaceStageDetails");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.PartItem", b =>
                {
                    b.Navigation("EVCheckDetails");

                    b.Navigation("VehiclePartItems");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.PartType", b =>
                {
                    b.Navigation("ModelPartTypes");

                    b.Navigation("Parts");

                    b.Navigation("PriceServices");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.RMA", b =>
                {
                    b.Navigation("RMADetails");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.ServiceCenter", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.Staff", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("EVChecks");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.Vehicle", b =>
                {
                    b.Navigation("VehiclePartItems");

                    b.Navigation("VehicleStages");
                });

            modelBuilder.Entity("eMotoCare.DAL.Entities.VehicleStage", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
